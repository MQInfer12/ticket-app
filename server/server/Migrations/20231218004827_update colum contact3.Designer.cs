// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Model;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20231218004827_update colum contact3")]
    partial class updatecolumcontact3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Model.Caja", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("Idempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idempresa");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("caja_pkey");

                    b.HasIndex("Idempresa");

                    b.ToTable("caja", (string)null);
                });

            modelBuilder.Entity("server.Model.Categorium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("Idempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idempresa");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("categoria_pkey");

                    b.HasIndex("Idempresa");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("server.Model.Contacto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ContactoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nombrecontacto");

                    b.Property<Guid>("Personaempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("personaempresa");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("contacto_pkey");

                    b.ToTable("contacto", (string)null);
                });

            modelBuilder.Entity("server.Model.Cuentum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("Idempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idempresa");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("cuenta_pkey");

                    b.HasIndex("Idempresa");

                    b.ToTable("cuenta", (string)null);
                });

            modelBuilder.Entity("server.Model.Descuento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double>("Descuento1")
                        .HasColumnType("double precision")
                        .HasColumnName("descuento");

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("Idtipoentrada")
                        .HasColumnType("uuid")
                        .HasColumnName("idtipoentrada");

                    b.HasKey("Id")
                        .HasName("descuento_pkey");

                    b.HasIndex("Idtipoentrada");

                    b.ToTable("descuento", (string)null);
                });

            modelBuilder.Entity("server.Model.DetalleTransaccione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Cantidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cantidad")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Ci")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ci");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("detalle");

                    b.Property<Guid>("Idtransaccion")
                        .HasColumnType("uuid")
                        .HasColumnName("idtransaccion");

                    b.Property<double>("Preciounitario")
                        .HasColumnType("double precision")
                        .HasColumnName("preciounitario");

                    b.Property<bool?>("Verificado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("verificado")
                        .HasDefaultValueSql("true");

                    b.HasKey("Id")
                        .HasName("detalle_transacciones_pkey");

                    b.HasIndex("Idtransaccion");

                    b.ToTable("detalle_transacciones", (string)null);
                });

            modelBuilder.Entity("server.Model.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("direccion");

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("empresa_pkey");

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("server.Model.Historial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Anterior")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("anterior");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("fecha");

                    b.Property<Guid>("Idempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idempresa");

                    b.Property<Guid>("Idfila")
                        .HasColumnType("uuid")
                        .HasColumnName("idfila");

                    b.Property<Guid>("Idusuario")
                        .HasColumnType("uuid")
                        .HasColumnName("idusuario");

                    b.Property<string>("Nuevo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nuevo");

                    b.Property<string>("Tabla")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tabla");

                    b.HasKey("Id")
                        .HasName("historial_pkey");

                    b.HasIndex("Idempresa");

                    b.HasIndex("Idusuario");

                    b.ToTable("historial", (string)null);
                });

            modelBuilder.Entity("server.Model.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Cantidadinicial")
                        .HasColumnType("integer")
                        .HasColumnName("cantidadinicial");

                    b.Property<double>("Costo")
                        .HasColumnType("double precision")
                        .HasColumnName("costo");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("detalle");

                    b.Property<string>("Fecharegistro")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("fecharegistro");

                    b.Property<Guid>("Idcategoria")
                        .HasColumnType("uuid")
                        .HasColumnName("idcategoria");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.HasKey("Id")
                        .HasName("item_pkey");

                    b.HasIndex("Idcategoria");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("server.Model.Persona", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Apmaterno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("apmaterno");

                    b.Property<string>("Appaterno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("appaterno");

                    b.Property<string>("Ci")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ci");

                    b.Property<string>("Foto")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("foto");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombres");

                    b.HasKey("Id")
                        .HasName("persona_pkey");

                    b.HasIndex(new[] { "Ci" }, "persona_ci_key")
                        .IsUnique();

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("server.Model.RolUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("Idempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idempresa");

                    b.Property<Guid>("Idtiporol")
                        .HasColumnType("uuid")
                        .HasColumnName("idtiporol");

                    b.Property<Guid>("Idusuario")
                        .HasColumnType("uuid")
                        .HasColumnName("idusuario");

                    b.HasKey("Id")
                        .HasName("rol_usuario_pkey");

                    b.HasIndex("Idempresa");

                    b.HasIndex("Idtiporol");

                    b.HasIndex("Idusuario");

                    b.ToTable("rol_usuario", (string)null);
                });

            modelBuilder.Entity("server.Model.Socio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Fechafinal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("fechafinal");

                    b.Property<string>("Fechainicio")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("fechainicio");

                    b.Property<Guid>("Idpersona")
                        .HasColumnType("uuid")
                        .HasColumnName("idpersona");

                    b.Property<Guid>("Idtiposocio")
                        .HasColumnType("uuid")
                        .HasColumnName("idtiposocio");

                    b.Property<int?>("Partidos")
                        .HasColumnType("integer")
                        .HasColumnName("partidos");

                    b.HasKey("Id")
                        .HasName("socio_pkey");

                    b.HasIndex("Idpersona");

                    b.HasIndex("Idtiposocio");

                    b.ToTable("socio", (string)null);
                });

            modelBuilder.Entity("server.Model.TipoEntradum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Cantidadinicial")
                        .HasColumnType("integer")
                        .HasColumnName("cantidadinicial");

                    b.Property<double>("Costo")
                        .HasColumnType("double precision")
                        .HasColumnName("costo");

                    b.Property<Guid>("Idtipoevento")
                        .HasColumnType("uuid")
                        .HasColumnName("idtipoevento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.HasKey("Id")
                        .HasName("tipo_entrada_pkey");

                    b.HasIndex("Idtipoevento");

                    b.ToTable("tipo_entrada", (string)null);
                });

            modelBuilder.Entity("server.Model.TipoEvento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("fecha");

                    b.Property<Guid>("Idempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idempresa");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("tipo_evento_pkey");

                    b.HasIndex("Idempresa");

                    b.ToTable("tipo_evento", (string)null);
                });

            modelBuilder.Entity("server.Model.TipoRol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("tipo_rol_pkey");

                    b.ToTable("tipo_rol", (string)null);
                });

            modelBuilder.Entity("server.Model.TipoSocio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double>("Costo")
                        .HasColumnType("double precision")
                        .HasColumnName("costo");

                    b.Property<double?>("Descuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("descuento")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("Duracion")
                        .HasColumnType("integer")
                        .HasColumnName("duracion");

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("Idempresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idempresa");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre");

                    b.Property<int?>("Partidos")
                        .HasColumnType("integer")
                        .HasColumnName("partidos");

                    b.HasKey("Id")
                        .HasName("tipo_socio_pkey");

                    b.HasIndex("Idempresa");

                    b.ToTable("tipo_socio", (string)null);
                });

            modelBuilder.Entity("server.Model.Transaccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<double>("Extra")
                        .HasColumnType("double precision")
                        .HasColumnName("extra");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("fecha");

                    b.Property<Guid>("Idcaja")
                        .HasColumnType("uuid")
                        .HasColumnName("idcaja");

                    b.Property<Guid>("Idcuenta")
                        .HasColumnType("uuid")
                        .HasColumnName("idcuenta");

                    b.Property<Guid>("Idusuario")
                        .HasColumnType("uuid")
                        .HasColumnName("idusuario");

                    b.Property<double>("Montototal")
                        .HasColumnType("double precision")
                        .HasColumnName("montototal");

                    b.Property<string>("Tipoentrega")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipoentrega");

                    b.HasKey("Id")
                        .HasName("transaccion_pkey");

                    b.HasIndex("Idcaja");

                    b.HasIndex("Idcuenta");

                    b.HasIndex("Idusuario");

                    b.ToTable("transaccion", (string)null);
                });

            modelBuilder.Entity("server.Model.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("contrasenia");

                    b.Property<Guid>("Idpersona")
                        .HasColumnType("uuid")
                        .HasColumnName("idpersona");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usuario");

                    b.HasKey("Id")
                        .HasName("usuario_pkey");

                    b.HasIndex("Idpersona");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("server.Model.UsuarioCaja", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("Idcaja")
                        .HasColumnType("uuid")
                        .HasColumnName("idcaja");

                    b.Property<Guid>("Idusuario")
                        .HasColumnType("uuid")
                        .HasColumnName("idusuario");

                    b.HasKey("Id")
                        .HasName("usuario_caja_pkey");

                    b.HasIndex("Idcaja");

                    b.HasIndex("Idusuario");

                    b.ToTable("usuario_caja", (string)null);
                });

            modelBuilder.Entity("server.Model.Caja", b =>
                {
                    b.HasOne("server.Model.Empresa", "IdempresaNavigation")
                        .WithMany("Cajas")
                        .HasForeignKey("Idempresa")
                        .IsRequired()
                        .HasConstraintName("caja_idempresa_fkey");

                    b.Navigation("IdempresaNavigation");
                });

            modelBuilder.Entity("server.Model.Categorium", b =>
                {
                    b.HasOne("server.Model.Empresa", "IdempresaNavigation")
                        .WithMany("Categoria")
                        .HasForeignKey("Idempresa")
                        .IsRequired()
                        .HasConstraintName("categoria_idempresa_fkey");

                    b.Navigation("IdempresaNavigation");
                });

            modelBuilder.Entity("server.Model.Cuentum", b =>
                {
                    b.HasOne("server.Model.Empresa", "IdempresaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("Idempresa")
                        .HasConstraintName("cuenta_idempresa_fkey");

                    b.Navigation("IdempresaNavigation");
                });

            modelBuilder.Entity("server.Model.Descuento", b =>
                {
                    b.HasOne("server.Model.TipoEntradum", "IdtipoentradaNavigation")
                        .WithMany("Descuentos")
                        .HasForeignKey("Idtipoentrada")
                        .IsRequired()
                        .HasConstraintName("descuento_idtipoentrada_fkey");

                    b.Navigation("IdtipoentradaNavigation");
                });

            modelBuilder.Entity("server.Model.DetalleTransaccione", b =>
                {
                    b.HasOne("server.Model.Transaccion", "IdtransaccionNavigation")
                        .WithMany("DetalleTransacciones")
                        .HasForeignKey("Idtransaccion")
                        .IsRequired()
                        .HasConstraintName("detalle_transacciones_idtransaccion_fkey");

                    b.Navigation("IdtransaccionNavigation");
                });

            modelBuilder.Entity("server.Model.Historial", b =>
                {
                    b.HasOne("server.Model.Empresa", "IdempresaNavigation")
                        .WithMany("Historials")
                        .HasForeignKey("Idempresa")
                        .IsRequired()
                        .HasConstraintName("historial_idempresa_fkey");

                    b.HasOne("server.Model.Usuario", "IdusuarioNavigation")
                        .WithMany("Historials")
                        .HasForeignKey("Idusuario")
                        .IsRequired()
                        .HasConstraintName("historial_idusuario_fkey");

                    b.Navigation("IdempresaNavigation");

                    b.Navigation("IdusuarioNavigation");
                });

            modelBuilder.Entity("server.Model.Item", b =>
                {
                    b.HasOne("server.Model.Categorium", "IdcategoriaNavigation")
                        .WithMany("Items")
                        .HasForeignKey("Idcategoria")
                        .IsRequired()
                        .HasConstraintName("item_idcategoria_fkey");

                    b.Navigation("IdcategoriaNavigation");
                });

            modelBuilder.Entity("server.Model.RolUsuario", b =>
                {
                    b.HasOne("server.Model.Empresa", "IdempresaNavigation")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("Idempresa")
                        .IsRequired()
                        .HasConstraintName("rol_usuario_idempresa_fkey");

                    b.HasOne("server.Model.TipoRol", "IdtiporolNavigation")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("Idtiporol")
                        .IsRequired()
                        .HasConstraintName("rol_usuario_idtiporol_fkey");

                    b.HasOne("server.Model.Usuario", "IdusuarioNavigation")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("Idusuario")
                        .IsRequired()
                        .HasConstraintName("rol_usuario_idusuario_fkey");

                    b.Navigation("IdempresaNavigation");

                    b.Navigation("IdtiporolNavigation");

                    b.Navigation("IdusuarioNavigation");
                });

            modelBuilder.Entity("server.Model.Socio", b =>
                {
                    b.HasOne("server.Model.Persona", "IdpersonaNavigation")
                        .WithMany("Socios")
                        .HasForeignKey("Idpersona")
                        .IsRequired()
                        .HasConstraintName("socio_idpersona_fkey");

                    b.HasOne("server.Model.TipoSocio", "IdtiposocioNavigation")
                        .WithMany("Socios")
                        .HasForeignKey("Idtiposocio")
                        .IsRequired()
                        .HasConstraintName("socio_idtiposocio_fkey");

                    b.Navigation("IdpersonaNavigation");

                    b.Navigation("IdtiposocioNavigation");
                });

            modelBuilder.Entity("server.Model.TipoEntradum", b =>
                {
                    b.HasOne("server.Model.TipoEvento", "IdtipoeventoNavigation")
                        .WithMany("TipoEntrada")
                        .HasForeignKey("Idtipoevento")
                        .IsRequired()
                        .HasConstraintName("tipo_entrada_idtipoevento_fkey");

                    b.Navigation("IdtipoeventoNavigation");
                });

            modelBuilder.Entity("server.Model.TipoEvento", b =>
                {
                    b.HasOne("server.Model.Empresa", "IdempresaNavigation")
                        .WithMany("TipoEventos")
                        .HasForeignKey("Idempresa")
                        .IsRequired()
                        .HasConstraintName("tipo_evento_idempresa_fkey");

                    b.Navigation("IdempresaNavigation");
                });

            modelBuilder.Entity("server.Model.TipoSocio", b =>
                {
                    b.HasOne("server.Model.Empresa", "IdempresaNavigation")
                        .WithMany("TipoSocios")
                        .HasForeignKey("Idempresa")
                        .IsRequired()
                        .HasConstraintName("tipo_socio_idempresa_fkey");

                    b.Navigation("IdempresaNavigation");
                });

            modelBuilder.Entity("server.Model.Transaccion", b =>
                {
                    b.HasOne("server.Model.Caja", "IdcajaNavigation")
                        .WithMany("Transaccions")
                        .HasForeignKey("Idcaja")
                        .IsRequired()
                        .HasConstraintName("transaccion_idcaja_fkey");

                    b.HasOne("server.Model.Cuentum", "IdcuentaNavigation")
                        .WithMany("Transaccions")
                        .HasForeignKey("Idcuenta")
                        .IsRequired()
                        .HasConstraintName("transaccion_idcuenta_fkey");

                    b.HasOne("server.Model.Usuario", "IdusuarioNavigation")
                        .WithMany("Transaccions")
                        .HasForeignKey("Idusuario")
                        .IsRequired()
                        .HasConstraintName("transaccion_idusuario_fkey");

                    b.Navigation("IdcajaNavigation");

                    b.Navigation("IdcuentaNavigation");

                    b.Navigation("IdusuarioNavigation");
                });

            modelBuilder.Entity("server.Model.Usuario", b =>
                {
                    b.HasOne("server.Model.Persona", "IdpersonaNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("Idpersona")
                        .IsRequired()
                        .HasConstraintName("usuario_idpersona_fkey");

                    b.Navigation("IdpersonaNavigation");
                });

            modelBuilder.Entity("server.Model.UsuarioCaja", b =>
                {
                    b.HasOne("server.Model.Caja", "IdcajaNavigation")
                        .WithMany("UsuarioCajas")
                        .HasForeignKey("Idcaja")
                        .IsRequired()
                        .HasConstraintName("usuario_caja_idcaja_fkey");

                    b.HasOne("server.Model.Usuario", "IdusuarioNavigation")
                        .WithMany("UsuarioCajas")
                        .HasForeignKey("Idusuario")
                        .IsRequired()
                        .HasConstraintName("usuario_caja_idusuario_fkey");

                    b.Navigation("IdcajaNavigation");

                    b.Navigation("IdusuarioNavigation");
                });

            modelBuilder.Entity("server.Model.Caja", b =>
                {
                    b.Navigation("Transaccions");

                    b.Navigation("UsuarioCajas");
                });

            modelBuilder.Entity("server.Model.Categorium", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("server.Model.Cuentum", b =>
                {
                    b.Navigation("Transaccions");
                });

            modelBuilder.Entity("server.Model.Empresa", b =>
                {
                    b.Navigation("Cajas");

                    b.Navigation("Categoria");

                    b.Navigation("Cuenta");

                    b.Navigation("Historials");

                    b.Navigation("RolUsuarios");

                    b.Navigation("TipoEventos");

                    b.Navigation("TipoSocios");
                });

            modelBuilder.Entity("server.Model.Persona", b =>
                {
                    b.Navigation("Socios");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("server.Model.TipoEntradum", b =>
                {
                    b.Navigation("Descuentos");
                });

            modelBuilder.Entity("server.Model.TipoEvento", b =>
                {
                    b.Navigation("TipoEntrada");
                });

            modelBuilder.Entity("server.Model.TipoRol", b =>
                {
                    b.Navigation("RolUsuarios");
                });

            modelBuilder.Entity("server.Model.TipoSocio", b =>
                {
                    b.Navigation("Socios");
                });

            modelBuilder.Entity("server.Model.Transaccion", b =>
                {
                    b.Navigation("DetalleTransacciones");
                });

            modelBuilder.Entity("server.Model.Usuario", b =>
                {
                    b.Navigation("Historials");

                    b.Navigation("RolUsuarios");

                    b.Navigation("Transaccions");

                    b.Navigation("UsuarioCajas");
                });
#pragma warning restore 612, 618
        }
    }
}
